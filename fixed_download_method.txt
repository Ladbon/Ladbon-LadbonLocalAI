    def simple_download_model(self, model_id, progress_callback=None, token=None):
        """Fixed download method with direct URL download as fallback for HuggingFace Hub downloads"""
        logger.info(f"Starting download for model: {model_id}")
        
        try:
            # Get model information
            available_models = self.list_available_models(include_trending=True)
            if model_id not in available_models:
                logger.error(f"Model {model_id} not found in available_models.")
                return False, f"Model {model_id} not found"
            
            model_info = available_models[model_id]
            repo_id = model_info["repo_id"]
            filename = model_info["filename"]
            
            # Setup directories and output path
            os.makedirs(self.models_dir, exist_ok=True)
            output_path = os.path.join(self.models_dir, filename)
            
            # Signal start of download
            logger.info(f"====== MODEL DOWNLOAD STARTED: {model_id} - 0% ======")
            if progress_callback:
                progress_callback(0)
            
            # BYPASS THE HUGGINGFACE_HUB DOWNLOAD AND USE DIRECT HTTP DOWNLOAD
            # This avoids the 'NoneType' has no attribute 'write' error completely
            # Construct direct URL to the file
            direct_url = f"https://huggingface.co/{repo_id}/resolve/main/{filename}"
            fallback_url = f"https://huggingface.co/{repo_id}/resolve/master/{filename}"
            
            logger.info(f"Attempting direct download from: {direct_url}")
            
            try:
                # Use requests with stream=True for better handling of large files
                stored_token = token or load_hf_token()
                headers = {}
                if stored_token:
                    headers["Authorization"] = f"Bearer {stored_token}"
                
                # First try the main branch
                response = requests.get(direct_url, headers=headers, stream=True, timeout=30)
                
                # If main branch fails, try master branch
                if response.status_code != 200:
                    logger.warning(f"Main branch download failed with status {response.status_code}, trying master branch")
                    response = requests.get(fallback_url, headers=headers, stream=True, timeout=30)
                
                if response.status_code == 200:
                    # Get total file size if available
                    total_size = int(response.headers.get('content-length', 0))
                    logger.info(f"Total download size: {total_size / (1024*1024):.2f} MB")
                    
                    # Download with progress tracking
                    downloaded_size = 0
                    last_percent_logged = -1
                    
                    with open(output_path, 'wb') as f:
                        for chunk in response.iter_content(chunk_size=8192):
                            if chunk:  # filter out keep-alive chunks
                                f.write(chunk)
                                downloaded_size += len(chunk)
                                
                                # Update progress
                                if total_size > 0:
                                    percent = int((downloaded_size / total_size) * 100)
                                    
                                    # Only log at most once per percent to avoid flooding logs
                                    if percent != last_percent_logged:
                                        last_percent_logged = percent
                                        
                                        # Log at 10% intervals and update UI
                                        if percent % 10 == 0:
                                            logger.info(f"Download progress: {percent}%")
                                        if progress_callback:
                                            progress_callback(percent)
                    
                    # Final progress update
                    if progress_callback:
                        progress_callback(100)
                    
                    file_size_mb = os.path.getsize(output_path) / (1024*1024)
                    logger.info(f"Successfully downloaded {model_id} to {output_path} ({file_size_mb:.1f} MB)")
                    return True, output_path
                else:
                    logger.error(f"Failed to download file: HTTP {response.status_code}")
                    return False, f"HTTP error: {response.status_code}"
            
            except Exception as e:
                logger.exception(f"Error with direct download: {str(e)}")
                if progress_callback:
                    progress_callback(100)
                return False, f"Download error: {str(e)}"
            
        except Exception as e:
            logger.exception(f"Error in download process: {str(e)}")
            if progress_callback:
                progress_callback(100)
            return False, f"Error: {str(e)}"
